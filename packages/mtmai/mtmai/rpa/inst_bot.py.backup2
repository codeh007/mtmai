import asyncio
import json
import logging
import subprocess
import time

import requests
import uiautomator2 as u2

logger = logging.getLogger(__name__)


class InstBot:
  android_package_name = "com.instagram.android"
  android_apk_url = "https://apk2.yuepa8.com/apk/instgram_v2.apk"
  # 使用29222作为本地转发端口
  LOCAL_PORT = 29222

  def __init__(self, device_serial: str):
    self.device = u2.connect(device_serial)
    self.cdp_ws_endpoint = None
    # 设备主机名
    self.dev_host = device_serial.split(":")[0]
    self.driver = None

  async def install_apk(self):
    app_list = self.device.app_list()
    # 如果没安装就安装
    if self.android_package_name not in app_list:
      self.device.app_install(self.android_apk_url)

  async def start(self):
    # 如果没启动就启动
    logger.info("start inst bot")
    await self.install_apk()
    app_running_list = self.device.app_list_running()
    logger.info(f"app_running_list: {app_running_list}")
    if self.android_package_name not in app_running_list:
      self.device.app_start(self.android_package_name)
    else:
      logger.info(f"app {self.android_package_name} is already running")

    # 获取应用的登录UI 状态, 如果是登录框,就进行登录
    login_ui_status = self.device.xpath('//*[@content-desc="登入"]').exists
    await self.login()

  async def login(self):
    success = await self.open_android_chrome_with_cdp()
    if not success:
      logger.error("无法设置Chrome CDP")
      return False

    return await self.selenium_automation()

  async def selenium_automation(self):
    """使用CDP直接连接到远程Chrome并进行自动化操作"""
    try:
      # 获取页面列表
      logger.info(f"获取页面列表，使用端口 {self.LOCAL_PORT}...")
      response = requests.get(f"http://localhost:{self.LOCAL_PORT}/json", timeout=10)
      if response.status_code != 200:
        logger.error(f"无法获取Chrome页面列表，状态码: {response.status_code}")
        return False

      pages = response.json()
      if not pages:
        logger.error("未找到可用的Chrome页面")
        return False

      # 最多显示前5个页面，避免日志过长
      page_count = min(len(pages), 5)
      logger.info(f"找到 {len(pages)} 个可用页面，显示前 {page_count} 个:")
      for i in range(page_count):
        page = pages[i]
        logger.info(f"页面 {i+1}: {page.get('title', 'Unknown')} - {page.get('url', 'Unknown')}")

      # 尝试找到一个百度页面或使用第一个页面
      target_page = None
      for page in pages:
        if page.get("url", "").startswith("https://www.baidu.com"):
          target_page = page
          logger.info(f"找到百度页面: {page.get('title')} - {page.get('url')}")
          break

      if not target_page:
        target_page = pages[0]
        logger.info(f"使用第一个页面: {target_page.get('title')} - {target_page.get('url')}")

      # 获取页面ID和debuggerUrl
      page_id = target_page.get("id")
      if not page_id:
        logger.error("无法获取页面ID")
        return False

      debug_url = target_page.get("webSocketDebuggerUrl")
      if debug_url:
        logger.info(f"使用页面调试URL: {debug_url}")

      # 使用CDP命令直接操作页面
      logger.info("使用CDP命令直接操作页面...")
      version_info = self.get_cdp_version_info()
      if version_info:
        logger.info(f"Chrome版本: {version_info.get('Browser', 'Unknown')}")

        # 使用CDP命令导航到URL
        logger.info("使用CDP Navigate命令打开百度...")
        navigate_result = self.execute_cdp_raw(page_id, "Page.navigate", {"url": "https://www.baidu.com"})
        if navigate_result:
          logger.info(f"导航结果: {navigate_result}")
          # 等待页面加载
          await asyncio.sleep(5)

          # 获取页面标题
          title_result = self.execute_cdp_raw(page_id, "Runtime.evaluate", {"expression": "document.title"})
          if title_result and "result" in title_result:
            logger.info(f"页面标题: {title_result['result'].get('value', 'Unknown')}")

          return True

      logger.error("无法使用CDP直接操作页面")
      return False
    except Exception as e:
      logger.error(f"CDP操作失败: {e}")
      return False

  def get_cdp_version_info(self):
    """获取CDP版本信息"""
    try:
      response = requests.get(f"http://localhost:{self.LOCAL_PORT}/json/version", timeout=10)
      if response.status_code == 200:
        return response.json()
      return None
    except Exception as e:
      logger.error(f"获取CDP版本信息失败: {e}")
      return None

  def execute_cdp_raw(self, page_id, method, params=None):
    """执行CDP命令并返回结果"""
    try:
      if not params:
        params = {}

      # 构建命令URL - 使用新的端口
      cmd_url = f"http://localhost:{self.LOCAL_PORT}/json/protocol/{page_id}"
      logger.info(f"发送CDP命令到: {cmd_url}")

      # 发送命令 - 增加超时时间
      payload = {"method": method, "params": params, "id": 1}
      logger.info(f"发送CDP命令: {method}, 参数: {params}")
      cmd_response = requests.post(cmd_url, json=payload, timeout=15)

      if cmd_response.status_code == 200:
        result = cmd_response.json().get("result")
        logger.info(f"CDP命令执行成功: {result}")
        return result
      else:
        logger.error(f"CDP命令执行失败: {cmd_response.status_code}")
        return None
    except Exception as e:
      logger.error(f"执行CDP命令异常: {e}")
      return None

  async def open_android_chrome_with_cdp(self):
    """设置并启动支持CDP的Chrome浏览器"""
    chrome_package = "com.android.chrome"

    # 检查Chrome是否已安装
    app_list = self.device.app_list()
    if chrome_package not in app_list:
      logger.error("Chrome未安装在设备上，请先安装Chrome")
      return False

    # 检查Chrome是否已在运行，如果没有运行则启动它
    app_running_list = self.device.app_list_running()
    if chrome_package not in app_running_list:
      logger.info("Chrome未运行，现在启动...")

      # 移除现有的端口转发
      device_serial = self.device.serial
      logger.info(f"正在移除现有的端口转发 (端口 {self.LOCAL_PORT})...")
      subprocess.run(
        f"adb -s {device_serial} forward --remove tcp:{self.LOCAL_PORT}",
        shell=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
      )
      time.sleep(1)

      # 设置新的端口转发
      logger.info(f"正在设置新的端口转发 ({self.LOCAL_PORT} -> chrome_devtools_remote)...")
      cmd = f"adb -s {device_serial} forward tcp:{self.LOCAL_PORT} localabstract:chrome_devtools_remote"
      logger.info(f"执行命令: {cmd}")
      result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
      if result.returncode != 0:
        logger.error(f"端口转发失败: {result.stderr}")
        return False

      # 以远程调试模式启动Chrome
      logger.info("正在以远程调试模式启动Chrome...")
      try:
        # 使用特定的命令行启动Chrome，确保启用远程调试
        start_cmd = "am start -a android.intent.action.VIEW -d 'about:blank' --ez 'enable-remote-debugging' true com.android.chrome"
        logger.info(f"执行启动命令: {start_cmd}")
        self.device.shell(start_cmd)
        time.sleep(3)
      except Exception as e:
        logger.error(f"启动Chrome时出错: {e}")
        try:
          # 尝试使用备用方法启动
          backup_cmd = (
            'am start -n com.android.chrome/com.google.android.apps.chrome.Main --ez "enable-remote-debugging" true'
          )
          logger.info(f"尝试备用启动命令: {backup_cmd}")
          self.device.shell(backup_cmd)
          time.sleep(3)
        except Exception as e2:
          logger.error(f"备用启动方法也失败: {e2}")
          return False
    else:
      logger.info("Chrome已经在运行")

      # Chrome已在运行，我们只设置端口转发
      device_serial = self.device.serial
      logger.info(f"正在设置端口转发 ({self.LOCAL_PORT})...")

      # 先移除现有的转发
      subprocess.run(
        f"adb -s {device_serial} forward --remove tcp:{self.LOCAL_PORT}",
        shell=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
      )
      time.sleep(1)

      # 设置新的转发
      cmd = f"adb -s {device_serial} forward tcp:{self.LOCAL_PORT} localabstract:chrome_devtools_remote"
      logger.info(f"执行命令: {cmd}")
      result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
      if result.returncode != 0:
        logger.error(f"端口转发失败: {result.stderr}")
        return False

    # 打开一个网页以确保Chrome正常运行
    logger.info("正在打开测试页面...")
    self.device.shell("am start -a android.intent.action.VIEW -d 'https://www.baidu.com' com.android.chrome")
    time.sleep(3)

    # 验证本地端口转发是否成功
    logger.info("验证CDP服务...")
    max_retries = 3
    for i in range(max_retries):
      try:
        # 使用curl检查服务可用性
        local_check_cmd = f"curl -s http://localhost:{self.LOCAL_PORT}/json/version"
        logger.info(f"执行验证命令: {local_check_cmd}")
        local_result = subprocess.run(local_check_cmd, shell=True, capture_output=True, text=True)

        if local_result.returncode == 0 and local_result.stdout:
          logger.info(f"本地CDP服务验证成功: {local_result.stdout[:100]}...")
          # 解析版本信息
          try:
            version_info = json.loads(local_result.stdout)
            self.cdp_ws_endpoint = version_info.get("webSocketDebuggerUrl")
            if self.cdp_ws_endpoint:
              # 更新WebSocket URL中的端口号
              self.cdp_ws_endpoint = self.cdp_ws_endpoint.replace(":9222", f":{self.LOCAL_PORT}")
              logger.info(f"获取到WebSocket端点: {self.cdp_ws_endpoint}")
              return True
            else:
              logger.warning("未找到WebSocket端点")
          except json.JSONDecodeError:
            logger.warning(f"无法解析版本信息: {local_result.stdout}")
        else:
          logger.warning(f"本地CDP服务验证失败: {local_result.stderr}")

        # 如果验证失败，等待一段时间后重试
        if i < max_retries - 1:
          logger.info(f"重试验证 ({i+2}/{max_retries})...")
          time.sleep(3)
      except Exception as e:
        logger.error(f"验证CDP服务时出错: {e}")
        if i < max_retries - 1:
          logger.info(f"重试验证 ({i+2}/{max_retries})...")
          time.sleep(3)

    logger.error("无法验证CDP服务，放弃尝试")
    return False

  async def execute_cdp_command(self, command, params=None):
    """执行CDP命令"""
    if not self.driver:
      logger.error("WebDriver未初始化，无法执行CDP命令")
      return None

    try:
      params = params or {}
      result = self.driver.execute_cdp_cmd(command, params)
      return result
    except Exception as e:
      logger.error(f"执行CDP命令 {command} 失败: {e}")
      return None

  async def close(self):
    """清理资源"""
    if self.driver:
      try:
        self.driver.quit()
      except Exception as e:
        logger.error(f"关闭WebDriver时出错: {e}")
      self.driver = None
      logger.info("已关闭WebDriver")
