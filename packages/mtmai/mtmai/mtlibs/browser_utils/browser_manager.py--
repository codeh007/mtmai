import os

from browser_use import Browser as BrowserUseBrowser
from browser_use import BrowserConfig, BrowserContextConfig
from browser_use.browser.context import BrowserContext
from loguru import logger
from mtmai.mtlibs.browser_utils.browser_manager import BrowserManager
from playwright.async_api import Browser as PlaywrightBrowser
from playwright.async_api import Page


async def load_undetect_script():
    undetect_script = open(
        "packages/mtmai/mtmai/mtlibs/browser_utils/stealth_js/undetect_script.js", "r"
    ).read()
    return undetect_script


class MtBrowserContext(BrowserContext):
    async def _create_context(self, browser: PlaywrightBrowser):
        playwright_context = await super()._create_context(browser)
        # from undetected_playwright import Malenia

        # await Malenia.apply_stealth(playwright_context)

        # 额外的反检测脚本
        await playwright_context.add_init_script(await load_undetect_script())
        playwright_context.on(
            "page",
            self.on_page_created,
        )

        return playwright_context

    async def on_page_created(self, page: Page):
        # 这行没实际生效, 原因未知
        logger.info(f"on_page_created: {page}")


class MtBrowserManager(BrowserManager):
    async def start(self):
        os.environ["DISPLAY"] = ":1"
        await super().start()

    def _get_browser_path(self):
        return super()._get_browser_path()

    async def create_browser_use_context(self):
        browser = BrowserUseBrowser(
            config=BrowserConfig(
                headless=False,
                disable_security=False,
                cdp_url=f"http://{self.config.host}:{self.config.debugging_port}",
            )
        )

        browser_context = MtBrowserContext(
            browser=browser,
            config=BrowserContextConfig(
                disable_security=False,  # 如果禁用了 csp, 一般会被识别为机器人
                # user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36",
                _force_keep_context_alive=True,
            ),
        )
        return browser_context
