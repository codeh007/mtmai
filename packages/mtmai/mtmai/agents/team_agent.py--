# from autogen_agentchat.base import TaskResult
# from autogen_core import MessageContext, RoutedAgent, message_handler
# from loguru import logger
# from mtmai.clients.rest.models.agent_run_input import AgentRunInput
# from mtmai.clients.rest.models.component_types import ComponentTypes
# from mtmai.clients.rest.models.mt_task_result import MtTaskResult
# from mtmai.context.context_client import TenantClient
# from mtmai.context.ctx import get_tenant_id, set_step_canceled_ctx
# from mtmai.teams.instagram_team import InstagramTeam


# class TeamRunnerAgent(RoutedAgent):
#     def __init__(self, description: str) -> None:
#         super().__init__(description)

#     @message_handler
#     async def run_team(self, message: AgentRunInput, ctx: MessageContext) -> None:
#         set_step_canceled_ctx(False)
#         tenant_client = TenantClient()
#         session_id = self.id.key
#         tid = get_tenant_id()
#         if not tid:
#             raise ValueError("tenant_id is required")
#         component_data = await tenant_client.ag.coms_api.coms_get(
#             tenant=tid,
#             com=message.component_id,
#         )
#         logger.info(f"component data: {component_data}")

#         if component_data.component_type == ComponentTypes.TEAM:
#             # team = Team.load_component(component_data)
#             team = InstagramTeam.load_component(component_data)
#             # return team
#         else:
#             raise ValueError(f"不支持组件类型: {component_data.component_type}")
#         async for event in team.run_stream(
#             task=message.content,
#             cancellation_token=ctx.cancellation_token,
#         ):
#             if isinstance(message, TaskResult):
#                 result = message
#                 mt_result = MtTaskResult(
#                     messages=result.messages,
#                     stop_reason=result.stop_reason,
#                 )
#                 tenant_client.emit(mt_result)
#                 break
#             await tenant_client.emit(event)
#         logger.info("团队运行完全结束")
