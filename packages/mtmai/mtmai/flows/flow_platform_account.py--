import pyotp
from loguru import logger
from mtmai.agents._types import IgLoginRequire
from mtmai.agents.cancel_token import MtCancelToken
from mtmai.clients.rest.models.ag_state_upsert import AgStateUpsert
from mtmai.clients.rest.models.flow_error import FlowError
from mtmai.clients.rest.models.flow_names import FlowNames
from mtmai.clients.rest.models.flow_platform_account_login_input import (
    FlowPlatformAccountLoginInput,
)
from mtmai.clients.rest.models.platform_account_upsert import PlatformAccountUpsert
from mtmai.clients.rest.models.state_type import StateType
from mtmai.context.context import Context
from mtmai.context.context_client import TenantClient
from mtmai.context.ctx import get_chat_session_id_ctx, get_tenant_id
from mtmai.flows.flow_ctx import FlowCtx
from mtmai.mtlibs.id import generate_uuid
from mtmai.mtlibs.instagrapi import Client
from mtmai.mtlibs.instagrapi.exceptions import BadPassword, TwoFactorRequired
from mtmai.worker_app import mtmapp


@mtmapp.workflow(
    name=FlowNames.PLATFORM_ACCOUNT_LOGIN,
    on_events=[f"{FlowNames.PLATFORM_ACCOUNT_LOGIN}"],
)
class FlowPlatformAccountLogin:
    @mtmapp.step(timeout="5m")
    async def entry(self, hatctx: Context):
        """
        社交媒体账号的初始化
        """
        flowctx = FlowCtx().from_hatctx(hatctx)
        input = FlowPlatformAccountLoginInput.model_validate(hatctx.input)
        cancellation_token = MtCancelToken()
        tenant_client = TenantClient()
        session_id = get_chat_session_id_ctx()
        tid = get_tenant_id()
        if not tid:
            raise ValueError("tenant_id is required")

        account = await tenant_client.platform_account_api.platform_account_get(
            tenant=tid,
            platform_account=input.platform_account_id,
        )
        account_state = account.state
        ig_settings = account_state.get("ig_settings")

        team = await flowctx.load_team(input.component_id)

        result = await team.run_stream(
            task=input, cancellation_token=cancellation_token
        )
        tenant_client = TenantClient()
        for k, v in result.items():
            logger.info(f"key: {k}, value: {v}")
            parts = k.split("/")
            topic = parts[0]
            source = parts[1] if len(parts) > 1 else "default"
            await tenant_client.ag_state_api.ag_state_upsert(
                tenant=tenant_client.tenant_id,
                ag_state_upsert=AgStateUpsert(
                    tenantId=tenant_client.tenant_id,
                    topic=topic,
                    source=source,
                    type=StateType.RUNTIMESTATE.value,
                    componentId=input.component_id,
                    chatId=session_id,
                    state=v,
                ),
            )
        if not ig_settings:
            # if input.action == "login":
            #     # STEP1: 登录
            try:
                ig_client = Client(
                    proxy=account_state.get("proxy_url"),
                )
                verification_code = pyotp.TOTP(input.two_factor_key).now()
                login_result = ig_client.login(
                    username=input.username,
                    password=input.password,
                    verification_code=verification_code,
                    relogin=False,
                )
                if not login_result:
                    raise Exception("登录失败")
                platform_account_id = generate_uuid()
                result = (
                    await tenant_client.platform_account_api.platform_account_upsert(
                        tenant=tid,
                        platform_account=platform_account_id,
                        platform_account_upsert=PlatformAccountUpsert(
                            username=input.username,
                            password=input.password,
                            state={
                                "ig_settings": ig_client.get_settings(),
                                "proxy_url": input.proxy_url,
                            },
                        ),
                    )
                )
                return {"result": "todo", "id": result.metadata.id}
            except TwoFactorRequired as e:
                logger.error(f"需要二次验证: {e}")
                # tenant_client.platform_account_api.platform_account_upsert(
                #     tenant=tid,
                #     platform_account=input.platform_account_id,
                #     platform_account_upsert=PlatformAccountUpsert(
                #         username=input.username,
                #         password=input.password,
                #         error=str(e),
                #     ),
                # )
                raise e
            except BadPassword:
                # tenant_client.platform_account_api.platform_account_update(
                #     tenant=tid,
                #     platform_account=input.platform_account_id,
                #     platform_account_update=PlatformAccountUpdate(
                #         # status=PlatformAccountStatus.FAILED,
                #     ),
                # )
                return IgLoginRequire(
                    username=input.username,
                    password=input.password,
                )
            except Exception as e:
                return FlowError(
                    error=str(e),
                ).model_dump()

        elif input.action == "add_followers":
            ig_client = Client()
            ig_client.proxy = input.proxy_url
            ig_client.logout()
            return {"result": "todo", "id": account.metadata.id}
        else:
            raise ValueError(f"action {input.action} is not supported")
