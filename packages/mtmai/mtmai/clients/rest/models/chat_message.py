# coding: utf-8

"""
    Mtmai API

    The Mtmai API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from mtmai.clients.rest.models.api_resource_meta import APIResourceMeta
from mtmai.clients.rest.models.chat_message_config import ChatMessageConfig
from mtmai.clients.rest.models.model_usage import ModelUsage
from typing import Optional, Set
from typing_extensions import Self

class ChatMessage(BaseModel):
    """
    ChatMessage
    """ # noqa: E501
    metadata: APIResourceMeta
    role: StrictStr
    content: StrictStr
    source: Optional[StrictStr] = None
    topic: Optional[StrictStr] = None
    thought: Optional[StrictStr] = None
    resource_id: Optional[StrictStr] = Field(default=None, alias="resourceId")
    msg_meta: Optional[Dict[str, Any]] = None
    config: Optional[ChatMessageConfig] = None
    model_usage: Optional[ModelUsage] = None
    __properties: ClassVar[List[str]] = ["metadata", "role", "content", "source", "topic", "thought", "resourceId", "msg_meta", "config", "model_usage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model_usage
        if self.model_usage:
            _dict['model_usage'] = self.model_usage.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ChatMessage) in the input: " + _key)

        _obj = cls.model_validate({
            "metadata": APIResourceMeta.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "role": obj.get("role"),
            "content": obj.get("content"),
            "source": obj.get("source"),
            "topic": obj.get("topic"),
            "thought": obj.get("thought"),
            "resourceId": obj.get("resourceId"),
            "msg_meta": obj.get("msg_meta"),
            "config": ChatMessageConfig.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "model_usage": ModelUsage.from_dict(obj["model_usage"]) if obj.get("model_usage") is not None else None
        })
        return _obj


