# coding: utf-8

"""
    Mtmai API

    The Mtmai API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from mtmai.clients.rest.models.agent_event_type import AgentEventType
from mtmai.clients.rest.models.agent_topic_types import AgentTopicTypes
from mtmai.clients.rest.models.agent_types import AgentTypes
from mtmai.clients.rest.models.assistant_agent_config import AssistantAgentConfig
from mtmai.clients.rest.models.browser_data import BrowserData
from mtmai.clients.rest.models.browser_open_task import BrowserOpenTask
from mtmai.clients.rest.models.browser_task import BrowserTask
from mtmai.clients.rest.models.chat_session_start_event import ChatSessionStartEvent
from mtmai.clients.rest.models.code_execution_input import CodeExecutionInput
from mtmai.clients.rest.models.code_execution_result import CodeExecutionResult
from mtmai.clients.rest.models.flow_error import FlowError
from mtmai.clients.rest.models.flow_names import FlowNames
from mtmai.clients.rest.models.flow_result import FlowResult
from mtmai.clients.rest.models.instagram_agent_state import InstagramAgentState
from mtmai.clients.rest.models.instagram_task import InstagramTask
from mtmai.clients.rest.models.model_config import ModelConfig
from mtmai.clients.rest.models.model_info import ModelInfo
from mtmai.clients.rest.models.platform_account_data import PlatformAccountData
from mtmai.clients.rest.models.platform_account_flow_input import PlatformAccountFlowInput
from mtmai.clients.rest.models.resource_flow_input import ResourceFlowInput
from mtmai.clients.rest.models.run_flow_model_input import RunFlowModelInput
from mtmai.clients.rest.models.social_add_followers_input import SocialAddFollowersInput
from mtmai.clients.rest.models.social_login_input import SocialLoginInput
from mtmai.clients.rest.models.social_login_result import SocialLoginResult
from mtmai.clients.rest.models.social_team_config import SocialTeamConfig
from mtmai.clients.rest.models.tool_types import ToolTypes
from mtmai.clients.rest.models.user_agent_state import UserAgentState
from mtmai.clients.rest.models.user_team_config import UserTeamConfig
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

WORKFLOWWORKERSCOUNTOTHER_ANY_OF_SCHEMAS = ["AgentEventType", "AgentTopicTypes", "AgentTypes", "AssistantAgentConfig", "BrowserData", "BrowserOpenTask", "BrowserTask", "ChatSessionStartEvent", "CodeExecutionInput", "CodeExecutionResult", "FlowError", "FlowNames", "FlowResult", "InstagramAgentState", "InstagramTask", "ModelConfig", "ModelInfo", "PlatformAccountData", "PlatformAccountFlowInput", "ResourceFlowInput", "RunFlowModelInput", "SocialAddFollowersInput", "SocialLoginInput", "SocialLoginResult", "SocialTeamConfig", "ToolTypes", "UserAgentState", "UserTeamConfig"]

class WorkflowWorkersCountOther(BaseModel):
    """
    WorkflowWorkersCountOther
    """

    # data type: ToolTypes
    anyof_schema_1_validator: Optional[ToolTypes] = None
    # data type: FlowNames
    anyof_schema_2_validator: Optional[FlowNames] = None
    # data type: AgentTopicTypes
    anyof_schema_3_validator: Optional[AgentTopicTypes] = None
    # data type: BrowserData
    anyof_schema_4_validator: Optional[BrowserData] = None
    # data type: PlatformAccountData
    anyof_schema_5_validator: Optional[PlatformAccountData] = None
    # data type: InstagramTask
    anyof_schema_6_validator: Optional[InstagramTask] = None
    # data type: ChatSessionStartEvent
    anyof_schema_7_validator: Optional[ChatSessionStartEvent] = None
    # data type: BrowserTask
    anyof_schema_8_validator: Optional[BrowserTask] = None
    # data type: BrowserOpenTask
    anyof_schema_9_validator: Optional[BrowserOpenTask] = None
    # data type: RunFlowModelInput
    anyof_schema_10_validator: Optional[RunFlowModelInput] = None
    # data type: AssistantAgentConfig
    anyof_schema_11_validator: Optional[AssistantAgentConfig] = None
    # data type: ModelConfig
    anyof_schema_12_validator: Optional[ModelConfig] = None
    # data type: ModelInfo
    anyof_schema_13_validator: Optional[ModelInfo] = None
    # data type: PlatformAccountFlowInput
    anyof_schema_14_validator: Optional[PlatformAccountFlowInput] = None
    # data type: AgentEventType
    anyof_schema_15_validator: Optional[AgentEventType] = None
    # data type: ResourceFlowInput
    anyof_schema_16_validator: Optional[ResourceFlowInput] = None
    # data type: InstagramAgentState
    anyof_schema_17_validator: Optional[InstagramAgentState] = None
    # data type: FlowError
    anyof_schema_18_validator: Optional[FlowError] = None
    # data type: SocialTeamConfig
    anyof_schema_19_validator: Optional[SocialTeamConfig] = None
    # data type: SocialAddFollowersInput
    anyof_schema_20_validator: Optional[SocialAddFollowersInput] = None
    # data type: UserAgentState
    anyof_schema_21_validator: Optional[UserAgentState] = None
    # data type: UserTeamConfig
    anyof_schema_22_validator: Optional[UserTeamConfig] = None
    # data type: CodeExecutionInput
    anyof_schema_23_validator: Optional[CodeExecutionInput] = None
    # data type: CodeExecutionResult
    anyof_schema_24_validator: Optional[CodeExecutionResult] = None
    # data type: SocialLoginInput
    anyof_schema_25_validator: Optional[SocialLoginInput] = None
    # data type: SocialLoginResult
    anyof_schema_26_validator: Optional[SocialLoginResult] = None
    # data type: FlowResult
    anyof_schema_27_validator: Optional[FlowResult] = None
    # data type: AgentTypes
    anyof_schema_28_validator: Optional[AgentTypes] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[AgentEventType, AgentTopicTypes, AgentTypes, AssistantAgentConfig, BrowserData, BrowserOpenTask, BrowserTask, ChatSessionStartEvent, CodeExecutionInput, CodeExecutionResult, FlowError, FlowNames, FlowResult, InstagramAgentState, InstagramTask, ModelConfig, ModelInfo, PlatformAccountData, PlatformAccountFlowInput, ResourceFlowInput, RunFlowModelInput, SocialAddFollowersInput, SocialLoginInput, SocialLoginResult, SocialTeamConfig, ToolTypes, UserAgentState, UserTeamConfig]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = { "AgentEventType", "AgentTopicTypes", "AgentTypes", "AssistantAgentConfig", "BrowserData", "BrowserOpenTask", "BrowserTask", "ChatSessionStartEvent", "CodeExecutionInput", "CodeExecutionResult", "FlowError", "FlowNames", "FlowResult", "InstagramAgentState", "InstagramTask", "ModelConfig", "ModelInfo", "PlatformAccountData", "PlatformAccountFlowInput", "ResourceFlowInput", "RunFlowModelInput", "SocialAddFollowersInput", "SocialLoginInput", "SocialLoginResult", "SocialTeamConfig", "ToolTypes", "UserAgentState", "UserTeamConfig" }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = WorkflowWorkersCountOther.model_construct()
        error_messages = []
        # validate data type: ToolTypes
        if not isinstance(v, ToolTypes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ToolTypes`")
        else:
            return v

        # validate data type: FlowNames
        if not isinstance(v, FlowNames):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FlowNames`")
        else:
            return v

        # validate data type: AgentTopicTypes
        if not isinstance(v, AgentTopicTypes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AgentTopicTypes`")
        else:
            return v

        # validate data type: BrowserData
        if not isinstance(v, BrowserData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BrowserData`")
        else:
            return v

        # validate data type: PlatformAccountData
        if not isinstance(v, PlatformAccountData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PlatformAccountData`")
        else:
            return v

        # validate data type: InstagramTask
        if not isinstance(v, InstagramTask):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InstagramTask`")
        else:
            return v

        # validate data type: ChatSessionStartEvent
        if not isinstance(v, ChatSessionStartEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ChatSessionStartEvent`")
        else:
            return v

        # validate data type: BrowserTask
        if not isinstance(v, BrowserTask):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BrowserTask`")
        else:
            return v

        # validate data type: BrowserOpenTask
        if not isinstance(v, BrowserOpenTask):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BrowserOpenTask`")
        else:
            return v

        # validate data type: RunFlowModelInput
        if not isinstance(v, RunFlowModelInput):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RunFlowModelInput`")
        else:
            return v

        # validate data type: AssistantAgentConfig
        if not isinstance(v, AssistantAgentConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AssistantAgentConfig`")
        else:
            return v

        # validate data type: ModelConfig
        if not isinstance(v, ModelConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ModelConfig`")
        else:
            return v

        # validate data type: ModelInfo
        if not isinstance(v, ModelInfo):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ModelInfo`")
        else:
            return v

        # validate data type: PlatformAccountFlowInput
        if not isinstance(v, PlatformAccountFlowInput):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PlatformAccountFlowInput`")
        else:
            return v

        # validate data type: AgentEventType
        if not isinstance(v, AgentEventType):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AgentEventType`")
        else:
            return v

        # validate data type: ResourceFlowInput
        if not isinstance(v, ResourceFlowInput):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ResourceFlowInput`")
        else:
            return v

        # validate data type: InstagramAgentState
        if not isinstance(v, InstagramAgentState):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InstagramAgentState`")
        else:
            return v

        # validate data type: FlowError
        if not isinstance(v, FlowError):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FlowError`")
        else:
            return v

        # validate data type: SocialTeamConfig
        if not isinstance(v, SocialTeamConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SocialTeamConfig`")
        else:
            return v

        # validate data type: SocialAddFollowersInput
        if not isinstance(v, SocialAddFollowersInput):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SocialAddFollowersInput`")
        else:
            return v

        # validate data type: UserAgentState
        if not isinstance(v, UserAgentState):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserAgentState`")
        else:
            return v

        # validate data type: UserTeamConfig
        if not isinstance(v, UserTeamConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserTeamConfig`")
        else:
            return v

        # validate data type: CodeExecutionInput
        if not isinstance(v, CodeExecutionInput):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CodeExecutionInput`")
        else:
            return v

        # validate data type: CodeExecutionResult
        if not isinstance(v, CodeExecutionResult):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CodeExecutionResult`")
        else:
            return v

        # validate data type: SocialLoginInput
        if not isinstance(v, SocialLoginInput):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SocialLoginInput`")
        else:
            return v

        # validate data type: SocialLoginResult
        if not isinstance(v, SocialLoginResult):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SocialLoginResult`")
        else:
            return v

        # validate data type: FlowResult
        if not isinstance(v, FlowResult):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FlowResult`")
        else:
            return v

        # validate data type: AgentTypes
        if not isinstance(v, AgentTypes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AgentTypes`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in WorkflowWorkersCountOther with anyOf schemas: AgentEventType, AgentTopicTypes, AgentTypes, AssistantAgentConfig, BrowserData, BrowserOpenTask, BrowserTask, ChatSessionStartEvent, CodeExecutionInput, CodeExecutionResult, FlowError, FlowNames, FlowResult, InstagramAgentState, InstagramTask, ModelConfig, ModelInfo, PlatformAccountData, PlatformAccountFlowInput, ResourceFlowInput, RunFlowModelInput, SocialAddFollowersInput, SocialLoginInput, SocialLoginResult, SocialTeamConfig, ToolTypes, UserAgentState, UserTeamConfig. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[ToolTypes] = None
        try:
            instance.actual_instance = ToolTypes.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[FlowNames] = None
        try:
            instance.actual_instance = FlowNames.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[AgentTopicTypes] = None
        try:
            instance.actual_instance = AgentTopicTypes.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[BrowserData] = None
        try:
            instance.actual_instance = BrowserData.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[PlatformAccountData] = None
        try:
            instance.actual_instance = PlatformAccountData.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[InstagramTask] = None
        try:
            instance.actual_instance = InstagramTask.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_7_validator: Optional[ChatSessionStartEvent] = None
        try:
            instance.actual_instance = ChatSessionStartEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_8_validator: Optional[BrowserTask] = None
        try:
            instance.actual_instance = BrowserTask.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_9_validator: Optional[BrowserOpenTask] = None
        try:
            instance.actual_instance = BrowserOpenTask.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_10_validator: Optional[RunFlowModelInput] = None
        try:
            instance.actual_instance = RunFlowModelInput.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_11_validator: Optional[AssistantAgentConfig] = None
        try:
            instance.actual_instance = AssistantAgentConfig.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_12_validator: Optional[ModelConfig] = None
        try:
            instance.actual_instance = ModelConfig.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_13_validator: Optional[ModelInfo] = None
        try:
            instance.actual_instance = ModelInfo.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_14_validator: Optional[PlatformAccountFlowInput] = None
        try:
            instance.actual_instance = PlatformAccountFlowInput.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_15_validator: Optional[AgentEventType] = None
        try:
            instance.actual_instance = AgentEventType.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_16_validator: Optional[ResourceFlowInput] = None
        try:
            instance.actual_instance = ResourceFlowInput.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_17_validator: Optional[InstagramAgentState] = None
        try:
            instance.actual_instance = InstagramAgentState.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_18_validator: Optional[FlowError] = None
        try:
            instance.actual_instance = FlowError.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_19_validator: Optional[SocialTeamConfig] = None
        try:
            instance.actual_instance = SocialTeamConfig.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_20_validator: Optional[SocialAddFollowersInput] = None
        try:
            instance.actual_instance = SocialAddFollowersInput.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_21_validator: Optional[UserAgentState] = None
        try:
            instance.actual_instance = UserAgentState.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_22_validator: Optional[UserTeamConfig] = None
        try:
            instance.actual_instance = UserTeamConfig.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_23_validator: Optional[CodeExecutionInput] = None
        try:
            instance.actual_instance = CodeExecutionInput.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_24_validator: Optional[CodeExecutionResult] = None
        try:
            instance.actual_instance = CodeExecutionResult.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_25_validator: Optional[SocialLoginInput] = None
        try:
            instance.actual_instance = SocialLoginInput.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_26_validator: Optional[SocialLoginResult] = None
        try:
            instance.actual_instance = SocialLoginResult.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_27_validator: Optional[FlowResult] = None
        try:
            instance.actual_instance = FlowResult.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_28_validator: Optional[AgentTypes] = None
        try:
            instance.actual_instance = AgentTypes.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into WorkflowWorkersCountOther with anyOf schemas: AgentEventType, AgentTopicTypes, AgentTypes, AssistantAgentConfig, BrowserData, BrowserOpenTask, BrowserTask, ChatSessionStartEvent, CodeExecutionInput, CodeExecutionResult, FlowError, FlowNames, FlowResult, InstagramAgentState, InstagramTask, ModelConfig, ModelInfo, PlatformAccountData, PlatformAccountFlowInput, ResourceFlowInput, RunFlowModelInput, SocialAddFollowersInput, SocialLoginInput, SocialLoginResult, SocialTeamConfig, ToolTypes, UserAgentState, UserTeamConfig. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AgentEventType, AgentTopicTypes, AgentTypes, AssistantAgentConfig, BrowserData, BrowserOpenTask, BrowserTask, ChatSessionStartEvent, CodeExecutionInput, CodeExecutionResult, FlowError, FlowNames, FlowResult, InstagramAgentState, InstagramTask, ModelConfig, ModelInfo, PlatformAccountData, PlatformAccountFlowInput, ResourceFlowInput, RunFlowModelInput, SocialAddFollowersInput, SocialLoginInput, SocialLoginResult, SocialTeamConfig, ToolTypes, UserAgentState, UserTeamConfig]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


