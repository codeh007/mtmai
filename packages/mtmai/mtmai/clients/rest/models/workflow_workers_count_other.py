# coding: utf-8

"""
    Mtmai API

    The Mtmai API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from mtmai.clients.rest.models.ag_events import AgEvents
from mtmai.clients.rest.models.agent_event_type import AgentEventType
from mtmai.clients.rest.models.agent_state_types import AgentStateTypes
from mtmai.clients.rest.models.agent_states import AgentStates
from mtmai.clients.rest.models.agent_topic_types import AgentTopicTypes
from mtmai.clients.rest.models.agent_types import AgentTypes
from mtmai.clients.rest.models.ask_user_function_call import AskUserFunctionCall
from mtmai.clients.rest.models.assistant_agent import AssistantAgent
from mtmai.clients.rest.models.browser_data import BrowserData
from mtmai.clients.rest.models.browser_open_task import BrowserOpenTask
from mtmai.clients.rest.models.browser_task import BrowserTask
from mtmai.clients.rest.models.chat_session_start_event import ChatSessionStartEvent
from mtmai.clients.rest.models.chat_start_input import ChatStartInput
from mtmai.clients.rest.models.code_execution_input import CodeExecutionInput
from mtmai.clients.rest.models.code_execution_result import CodeExecutionResult
from mtmai.clients.rest.models.code_executor_agent import CodeExecutorAgent
from mtmai.clients.rest.models.component_types import ComponentTypes
from mtmai.clients.rest.models.components import Components
from mtmai.clients.rest.models.flow_error import FlowError
from mtmai.clients.rest.models.flow_names import FlowNames
from mtmai.clients.rest.models.flow_result import FlowResult
from mtmai.clients.rest.models.flow_team_input import FlowTeamInput
from mtmai.clients.rest.models.instagram_agent import InstagramAgent
from mtmai.clients.rest.models.instagram_task import InstagramTask
from mtmai.clients.rest.models.my_demo_agent_event import MyDemoAgentEvent
from mtmai.clients.rest.models.open_ai_chat_completion_client import OpenAIChatCompletionClient
from mtmai.clients.rest.models.open_ai_client_configuration_config_model import OpenAIClientConfigurationConfigModel
from mtmai.clients.rest.models.platform_account_data import PlatformAccountData
from mtmai.clients.rest.models.platform_account_flow_input import PlatformAccountFlowInput
from mtmai.clients.rest.models.provider_types import ProviderTypes
from mtmai.clients.rest.models.round_robin_group_chat import RoundRobinGroupChat
from mtmai.clients.rest.models.social_add_followers_input import SocialAddFollowersInput
from mtmai.clients.rest.models.social_login_input import SocialLoginInput
from mtmai.clients.rest.models.social_login_result import SocialLoginResult
from mtmai.clients.rest.models.social_team import SocialTeam
from mtmai.clients.rest.models.society_of_mind_agent import SocietyOfMindAgent
from mtmai.clients.rest.models.team_state import TeamState
from mtmai.clients.rest.models.tool_call_request_event import ToolCallRequestEvent
from mtmai.clients.rest.models.tool_types import ToolTypes
from mtmai.clients.rest.models.user_input_requested_event import UserInputRequestedEvent
from mtmai.clients.rest.models.user_proxy_agent import UserProxyAgent
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

WORKFLOWWORKERSCOUNTOTHER_ANY_OF_SCHEMAS = ["AgEvents", "AgentEventType", "AgentStateTypes", "AgentStates", "AgentTopicTypes", "AgentTypes", "AskUserFunctionCall", "AssistantAgent", "BrowserData", "BrowserOpenTask", "BrowserTask", "ChatSessionStartEvent", "ChatStartInput", "CodeExecutionInput", "CodeExecutionResult", "CodeExecutorAgent", "ComponentTypes", "Components", "FlowError", "FlowNames", "FlowResult", "FlowTeamInput", "InstagramAgent", "InstagramTask", "MyDemoAgentEvent", "OpenAIChatCompletionClient", "OpenAIClientConfigurationConfigModel", "PlatformAccountData", "PlatformAccountFlowInput", "ProviderTypes", "RoundRobinGroupChat", "SocialAddFollowersInput", "SocialLoginInput", "SocialLoginResult", "SocialTeam", "SocietyOfMindAgent", "TeamState", "ToolCallRequestEvent", "ToolTypes", "UserInputRequestedEvent", "UserProxyAgent"]

class WorkflowWorkersCountOther(BaseModel):
    """
    WorkflowWorkersCountOther
    """

    # data type: ToolTypes
    anyof_schema_1_validator: Optional[ToolTypes] = None
    # data type: FlowNames
    anyof_schema_2_validator: Optional[FlowNames] = None
    # data type: AgentTopicTypes
    anyof_schema_3_validator: Optional[AgentTopicTypes] = None
    # data type: ComponentTypes
    anyof_schema_4_validator: Optional[ComponentTypes] = None
    # data type: ProviderTypes
    anyof_schema_5_validator: Optional[ProviderTypes] = None
    # data type: AgentEventType
    anyof_schema_6_validator: Optional[AgentEventType] = None
    # data type: AgentStateTypes
    anyof_schema_7_validator: Optional[AgentStateTypes] = None
    # data type: AgentTypes
    anyof_schema_8_validator: Optional[AgentTypes] = None
    # data type: BrowserData
    anyof_schema_9_validator: Optional[BrowserData] = None
    # data type: PlatformAccountData
    anyof_schema_10_validator: Optional[PlatformAccountData] = None
    # data type: InstagramTask
    anyof_schema_11_validator: Optional[InstagramTask] = None
    # data type: ChatSessionStartEvent
    anyof_schema_12_validator: Optional[ChatSessionStartEvent] = None
    # data type: BrowserTask
    anyof_schema_13_validator: Optional[BrowserTask] = None
    # data type: BrowserOpenTask
    anyof_schema_14_validator: Optional[BrowserOpenTask] = None
    # data type: PlatformAccountFlowInput
    anyof_schema_15_validator: Optional[PlatformAccountFlowInput] = None
    # data type: FlowError
    anyof_schema_16_validator: Optional[FlowError] = None
    # data type: SocialAddFollowersInput
    anyof_schema_17_validator: Optional[SocialAddFollowersInput] = None
    # data type: FlowTeamInput
    anyof_schema_18_validator: Optional[FlowTeamInput] = None
    # data type: CodeExecutionInput
    anyof_schema_19_validator: Optional[CodeExecutionInput] = None
    # data type: CodeExecutionResult
    anyof_schema_20_validator: Optional[CodeExecutionResult] = None
    # data type: SocialLoginInput
    anyof_schema_21_validator: Optional[SocialLoginInput] = None
    # data type: SocialLoginResult
    anyof_schema_22_validator: Optional[SocialLoginResult] = None
    # data type: FlowResult
    anyof_schema_23_validator: Optional[FlowResult] = None
    # data type: ChatStartInput
    anyof_schema_24_validator: Optional[ChatStartInput] = None
    # data type: AskUserFunctionCall
    anyof_schema_25_validator: Optional[AskUserFunctionCall] = None
    # data type: ToolCallRequestEvent
    anyof_schema_26_validator: Optional[ToolCallRequestEvent] = None
    # data type: MyDemoAgentEvent
    anyof_schema_27_validator: Optional[MyDemoAgentEvent] = None
    # data type: UserInputRequestedEvent
    anyof_schema_28_validator: Optional[UserInputRequestedEvent] = None
    # data type: AssistantAgent
    anyof_schema_29_validator: Optional[AssistantAgent] = None
    # data type: InstagramAgent
    anyof_schema_30_validator: Optional[InstagramAgent] = None
    # data type: OpenAIChatCompletionClient
    anyof_schema_31_validator: Optional[OpenAIChatCompletionClient] = None
    # data type: RoundRobinGroupChat
    anyof_schema_32_validator: Optional[RoundRobinGroupChat] = None
    # data type: Components
    anyof_schema_33_validator: Optional[Components] = None
    # data type: SocialTeam
    anyof_schema_34_validator: Optional[SocialTeam] = None
    # data type: CodeExecutorAgent
    anyof_schema_35_validator: Optional[CodeExecutorAgent] = None
    # data type: SocietyOfMindAgent
    anyof_schema_36_validator: Optional[SocietyOfMindAgent] = None
    # data type: UserProxyAgent
    anyof_schema_37_validator: Optional[UserProxyAgent] = None
    # data type: OpenAIClientConfigurationConfigModel
    anyof_schema_38_validator: Optional[OpenAIClientConfigurationConfigModel] = None
    # data type: TeamState
    anyof_schema_39_validator: Optional[TeamState] = None
    # data type: AgentStates
    anyof_schema_40_validator: Optional[AgentStates] = None
    # data type: AgEvents
    anyof_schema_41_validator: Optional[AgEvents] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[AgEvents, AgentEventType, AgentStateTypes, AgentStates, AgentTopicTypes, AgentTypes, AskUserFunctionCall, AssistantAgent, BrowserData, BrowserOpenTask, BrowserTask, ChatSessionStartEvent, ChatStartInput, CodeExecutionInput, CodeExecutionResult, CodeExecutorAgent, ComponentTypes, Components, FlowError, FlowNames, FlowResult, FlowTeamInput, InstagramAgent, InstagramTask, MyDemoAgentEvent, OpenAIChatCompletionClient, OpenAIClientConfigurationConfigModel, PlatformAccountData, PlatformAccountFlowInput, ProviderTypes, RoundRobinGroupChat, SocialAddFollowersInput, SocialLoginInput, SocialLoginResult, SocialTeam, SocietyOfMindAgent, TeamState, ToolCallRequestEvent, ToolTypes, UserInputRequestedEvent, UserProxyAgent]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = { "AgEvents", "AgentEventType", "AgentStateTypes", "AgentStates", "AgentTopicTypes", "AgentTypes", "AskUserFunctionCall", "AssistantAgent", "BrowserData", "BrowserOpenTask", "BrowserTask", "ChatSessionStartEvent", "ChatStartInput", "CodeExecutionInput", "CodeExecutionResult", "CodeExecutorAgent", "ComponentTypes", "Components", "FlowError", "FlowNames", "FlowResult", "FlowTeamInput", "InstagramAgent", "InstagramTask", "MyDemoAgentEvent", "OpenAIChatCompletionClient", "OpenAIClientConfigurationConfigModel", "PlatformAccountData", "PlatformAccountFlowInput", "ProviderTypes", "RoundRobinGroupChat", "SocialAddFollowersInput", "SocialLoginInput", "SocialLoginResult", "SocialTeam", "SocietyOfMindAgent", "TeamState", "ToolCallRequestEvent", "ToolTypes", "UserInputRequestedEvent", "UserProxyAgent" }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = WorkflowWorkersCountOther.model_construct()
        error_messages = []
        # validate data type: ToolTypes
        if not isinstance(v, ToolTypes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ToolTypes`")
        else:
            return v

        # validate data type: FlowNames
        if not isinstance(v, FlowNames):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FlowNames`")
        else:
            return v

        # validate data type: AgentTopicTypes
        if not isinstance(v, AgentTopicTypes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AgentTopicTypes`")
        else:
            return v

        # validate data type: ComponentTypes
        if not isinstance(v, ComponentTypes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ComponentTypes`")
        else:
            return v

        # validate data type: ProviderTypes
        if not isinstance(v, ProviderTypes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ProviderTypes`")
        else:
            return v

        # validate data type: AgentEventType
        if not isinstance(v, AgentEventType):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AgentEventType`")
        else:
            return v

        # validate data type: AgentStateTypes
        if not isinstance(v, AgentStateTypes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AgentStateTypes`")
        else:
            return v

        # validate data type: AgentTypes
        if not isinstance(v, AgentTypes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AgentTypes`")
        else:
            return v

        # validate data type: BrowserData
        if not isinstance(v, BrowserData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BrowserData`")
        else:
            return v

        # validate data type: PlatformAccountData
        if not isinstance(v, PlatformAccountData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PlatformAccountData`")
        else:
            return v

        # validate data type: InstagramTask
        if not isinstance(v, InstagramTask):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InstagramTask`")
        else:
            return v

        # validate data type: ChatSessionStartEvent
        if not isinstance(v, ChatSessionStartEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ChatSessionStartEvent`")
        else:
            return v

        # validate data type: BrowserTask
        if not isinstance(v, BrowserTask):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BrowserTask`")
        else:
            return v

        # validate data type: BrowserOpenTask
        if not isinstance(v, BrowserOpenTask):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BrowserOpenTask`")
        else:
            return v

        # validate data type: PlatformAccountFlowInput
        if not isinstance(v, PlatformAccountFlowInput):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PlatformAccountFlowInput`")
        else:
            return v

        # validate data type: FlowError
        if not isinstance(v, FlowError):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FlowError`")
        else:
            return v

        # validate data type: SocialAddFollowersInput
        if not isinstance(v, SocialAddFollowersInput):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SocialAddFollowersInput`")
        else:
            return v

        # validate data type: FlowTeamInput
        if not isinstance(v, FlowTeamInput):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FlowTeamInput`")
        else:
            return v

        # validate data type: CodeExecutionInput
        if not isinstance(v, CodeExecutionInput):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CodeExecutionInput`")
        else:
            return v

        # validate data type: CodeExecutionResult
        if not isinstance(v, CodeExecutionResult):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CodeExecutionResult`")
        else:
            return v

        # validate data type: SocialLoginInput
        if not isinstance(v, SocialLoginInput):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SocialLoginInput`")
        else:
            return v

        # validate data type: SocialLoginResult
        if not isinstance(v, SocialLoginResult):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SocialLoginResult`")
        else:
            return v

        # validate data type: FlowResult
        if not isinstance(v, FlowResult):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FlowResult`")
        else:
            return v

        # validate data type: ChatStartInput
        if not isinstance(v, ChatStartInput):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ChatStartInput`")
        else:
            return v

        # validate data type: AskUserFunctionCall
        if not isinstance(v, AskUserFunctionCall):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AskUserFunctionCall`")
        else:
            return v

        # validate data type: ToolCallRequestEvent
        if not isinstance(v, ToolCallRequestEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ToolCallRequestEvent`")
        else:
            return v

        # validate data type: MyDemoAgentEvent
        if not isinstance(v, MyDemoAgentEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MyDemoAgentEvent`")
        else:
            return v

        # validate data type: UserInputRequestedEvent
        if not isinstance(v, UserInputRequestedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserInputRequestedEvent`")
        else:
            return v

        # validate data type: AssistantAgent
        if not isinstance(v, AssistantAgent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AssistantAgent`")
        else:
            return v

        # validate data type: InstagramAgent
        if not isinstance(v, InstagramAgent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InstagramAgent`")
        else:
            return v

        # validate data type: OpenAIChatCompletionClient
        if not isinstance(v, OpenAIChatCompletionClient):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OpenAIChatCompletionClient`")
        else:
            return v

        # validate data type: RoundRobinGroupChat
        if not isinstance(v, RoundRobinGroupChat):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RoundRobinGroupChat`")
        else:
            return v

        # validate data type: Components
        if not isinstance(v, Components):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Components`")
        else:
            return v

        # validate data type: SocialTeam
        if not isinstance(v, SocialTeam):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SocialTeam`")
        else:
            return v

        # validate data type: CodeExecutorAgent
        if not isinstance(v, CodeExecutorAgent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CodeExecutorAgent`")
        else:
            return v

        # validate data type: SocietyOfMindAgent
        if not isinstance(v, SocietyOfMindAgent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SocietyOfMindAgent`")
        else:
            return v

        # validate data type: UserProxyAgent
        if not isinstance(v, UserProxyAgent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserProxyAgent`")
        else:
            return v

        # validate data type: OpenAIClientConfigurationConfigModel
        if not isinstance(v, OpenAIClientConfigurationConfigModel):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OpenAIClientConfigurationConfigModel`")
        else:
            return v

        # validate data type: TeamState
        if not isinstance(v, TeamState):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TeamState`")
        else:
            return v

        # validate data type: AgentStates
        if not isinstance(v, AgentStates):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AgentStates`")
        else:
            return v

        # validate data type: AgEvents
        if not isinstance(v, AgEvents):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AgEvents`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in WorkflowWorkersCountOther with anyOf schemas: AgEvents, AgentEventType, AgentStateTypes, AgentStates, AgentTopicTypes, AgentTypes, AskUserFunctionCall, AssistantAgent, BrowserData, BrowserOpenTask, BrowserTask, ChatSessionStartEvent, ChatStartInput, CodeExecutionInput, CodeExecutionResult, CodeExecutorAgent, ComponentTypes, Components, FlowError, FlowNames, FlowResult, FlowTeamInput, InstagramAgent, InstagramTask, MyDemoAgentEvent, OpenAIChatCompletionClient, OpenAIClientConfigurationConfigModel, PlatformAccountData, PlatformAccountFlowInput, ProviderTypes, RoundRobinGroupChat, SocialAddFollowersInput, SocialLoginInput, SocialLoginResult, SocialTeam, SocietyOfMindAgent, TeamState, ToolCallRequestEvent, ToolTypes, UserInputRequestedEvent, UserProxyAgent. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[ToolTypes] = None
        try:
            instance.actual_instance = ToolTypes.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[FlowNames] = None
        try:
            instance.actual_instance = FlowNames.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[AgentTopicTypes] = None
        try:
            instance.actual_instance = AgentTopicTypes.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[ComponentTypes] = None
        try:
            instance.actual_instance = ComponentTypes.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[ProviderTypes] = None
        try:
            instance.actual_instance = ProviderTypes.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[AgentEventType] = None
        try:
            instance.actual_instance = AgentEventType.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_7_validator: Optional[AgentStateTypes] = None
        try:
            instance.actual_instance = AgentStateTypes.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_8_validator: Optional[AgentTypes] = None
        try:
            instance.actual_instance = AgentTypes.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_9_validator: Optional[BrowserData] = None
        try:
            instance.actual_instance = BrowserData.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_10_validator: Optional[PlatformAccountData] = None
        try:
            instance.actual_instance = PlatformAccountData.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_11_validator: Optional[InstagramTask] = None
        try:
            instance.actual_instance = InstagramTask.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_12_validator: Optional[ChatSessionStartEvent] = None
        try:
            instance.actual_instance = ChatSessionStartEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_13_validator: Optional[BrowserTask] = None
        try:
            instance.actual_instance = BrowserTask.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_14_validator: Optional[BrowserOpenTask] = None
        try:
            instance.actual_instance = BrowserOpenTask.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_15_validator: Optional[PlatformAccountFlowInput] = None
        try:
            instance.actual_instance = PlatformAccountFlowInput.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_16_validator: Optional[FlowError] = None
        try:
            instance.actual_instance = FlowError.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_17_validator: Optional[SocialAddFollowersInput] = None
        try:
            instance.actual_instance = SocialAddFollowersInput.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_18_validator: Optional[FlowTeamInput] = None
        try:
            instance.actual_instance = FlowTeamInput.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_19_validator: Optional[CodeExecutionInput] = None
        try:
            instance.actual_instance = CodeExecutionInput.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_20_validator: Optional[CodeExecutionResult] = None
        try:
            instance.actual_instance = CodeExecutionResult.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_21_validator: Optional[SocialLoginInput] = None
        try:
            instance.actual_instance = SocialLoginInput.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_22_validator: Optional[SocialLoginResult] = None
        try:
            instance.actual_instance = SocialLoginResult.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_23_validator: Optional[FlowResult] = None
        try:
            instance.actual_instance = FlowResult.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_24_validator: Optional[ChatStartInput] = None
        try:
            instance.actual_instance = ChatStartInput.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_25_validator: Optional[AskUserFunctionCall] = None
        try:
            instance.actual_instance = AskUserFunctionCall.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_26_validator: Optional[ToolCallRequestEvent] = None
        try:
            instance.actual_instance = ToolCallRequestEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_27_validator: Optional[MyDemoAgentEvent] = None
        try:
            instance.actual_instance = MyDemoAgentEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_28_validator: Optional[UserInputRequestedEvent] = None
        try:
            instance.actual_instance = UserInputRequestedEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_29_validator: Optional[AssistantAgent] = None
        try:
            instance.actual_instance = AssistantAgent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_30_validator: Optional[InstagramAgent] = None
        try:
            instance.actual_instance = InstagramAgent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_31_validator: Optional[OpenAIChatCompletionClient] = None
        try:
            instance.actual_instance = OpenAIChatCompletionClient.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_32_validator: Optional[RoundRobinGroupChat] = None
        try:
            instance.actual_instance = RoundRobinGroupChat.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_33_validator: Optional[Components] = None
        try:
            instance.actual_instance = Components.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_34_validator: Optional[SocialTeam] = None
        try:
            instance.actual_instance = SocialTeam.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_35_validator: Optional[CodeExecutorAgent] = None
        try:
            instance.actual_instance = CodeExecutorAgent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_36_validator: Optional[SocietyOfMindAgent] = None
        try:
            instance.actual_instance = SocietyOfMindAgent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_37_validator: Optional[UserProxyAgent] = None
        try:
            instance.actual_instance = UserProxyAgent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_38_validator: Optional[OpenAIClientConfigurationConfigModel] = None
        try:
            instance.actual_instance = OpenAIClientConfigurationConfigModel.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_39_validator: Optional[TeamState] = None
        try:
            instance.actual_instance = TeamState.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_40_validator: Optional[AgentStates] = None
        try:
            instance.actual_instance = AgentStates.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_41_validator: Optional[AgEvents] = None
        try:
            instance.actual_instance = AgEvents.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into WorkflowWorkersCountOther with anyOf schemas: AgEvents, AgentEventType, AgentStateTypes, AgentStates, AgentTopicTypes, AgentTypes, AskUserFunctionCall, AssistantAgent, BrowserData, BrowserOpenTask, BrowserTask, ChatSessionStartEvent, ChatStartInput, CodeExecutionInput, CodeExecutionResult, CodeExecutorAgent, ComponentTypes, Components, FlowError, FlowNames, FlowResult, FlowTeamInput, InstagramAgent, InstagramTask, MyDemoAgentEvent, OpenAIChatCompletionClient, OpenAIClientConfigurationConfigModel, PlatformAccountData, PlatformAccountFlowInput, ProviderTypes, RoundRobinGroupChat, SocialAddFollowersInput, SocialLoginInput, SocialLoginResult, SocialTeam, SocietyOfMindAgent, TeamState, ToolCallRequestEvent, ToolTypes, UserInputRequestedEvent, UserProxyAgent. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AgEvents, AgentEventType, AgentStateTypes, AgentStates, AgentTopicTypes, AgentTypes, AskUserFunctionCall, AssistantAgent, BrowserData, BrowserOpenTask, BrowserTask, ChatSessionStartEvent, ChatStartInput, CodeExecutionInput, CodeExecutionResult, CodeExecutorAgent, ComponentTypes, Components, FlowError, FlowNames, FlowResult, FlowTeamInput, InstagramAgent, InstagramTask, MyDemoAgentEvent, OpenAIChatCompletionClient, OpenAIClientConfigurationConfigModel, PlatformAccountData, PlatformAccountFlowInput, ProviderTypes, RoundRobinGroupChat, SocialAddFollowersInput, SocialLoginInput, SocialLoginResult, SocialTeam, SocietyOfMindAgent, TeamState, ToolCallRequestEvent, ToolTypes, UserInputRequestedEvent, UserProxyAgent]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


