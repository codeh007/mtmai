# coding: utf-8

"""
    Gomtm API

    The Gomtm API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Proxy(BaseModel):
    """
    A proxy server
    """ # noqa: E501
    id: StrictStr = Field(description="The unique identifier of the proxy")
    name: StrictStr = Field(description="The name of the proxy")
    description: Optional[StrictStr] = Field(default=None, description="The description of the proxy")
    url: StrictStr = Field(description="The URL of the proxy")
    type: StrictStr = Field(description="The type of the proxy (e.g., HTTP, SOCKS5)")
    provider: StrictStr = Field(description="The provider of the proxy")
    country_code: Optional[StrictStr] = Field(default=None, description="The country code where the proxy is located", alias="countryCode")
    port: Optional[StrictInt] = Field(default=None, description="The port number of the proxy")
    last_used_at: Optional[datetime] = Field(default=None, description="The last time the proxy was used", alias="lastUsedAt")
    enabled: StrictBool = Field(description="Whether the proxy is enabled")
    created_at: Optional[datetime] = Field(default=None, description="The time the proxy was created", alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, description="The last time the proxy was updated", alias="updatedAt")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "url", "type", "provider", "countryCode", "port", "lastUsedAt", "enabled", "createdAt", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Proxy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Proxy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Proxy) in the input: " + _key)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "url": obj.get("url"),
            "type": obj.get("type"),
            "provider": obj.get("provider"),
            "countryCode": obj.get("countryCode"),
            "port": obj.get("port"),
            "lastUsedAt": obj.get("lastUsedAt"),
            "enabled": obj.get("enabled"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


