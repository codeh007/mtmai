# coding: utf-8

"""
    Mtmai API

    The Mtmai API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from mtmai.clients.rest.models.browser_data import BrowserData
from mtmai.clients.rest.models.browser_open_task import BrowserOpenTask
from mtmai.clients.rest.models.browser_task import BrowserTask
from mtmai.clients.rest.models.chat_session_start_event import ChatSessionStartEvent
from mtmai.clients.rest.models.code_review_result import CodeReviewResult
from mtmai.clients.rest.models.code_review_task import CodeReviewTask
from mtmai.clients.rest.models.code_writing_result import CodeWritingResult
from mtmai.clients.rest.models.code_writing_task import CodeWritingTask
from mtmai.clients.rest.models.instagram_task import InstagramTask
from mtmai.clients.rest.models.mt_task_result import MtTaskResult
from mtmai.clients.rest.models.my_message import MyMessage
from mtmai.clients.rest.models.platform_account_data import PlatformAccountData
from mtmai.clients.rest.models.platform_account_task import PlatformAccountTask
from mtmai.clients.rest.models.team_runner_task import TeamRunnerTask
from mtmai.clients.rest.models.termination_message import TerminationMessage
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

AGENTRUNINPUTOTHER_ANY_OF_SCHEMAS = ["BrowserData", "BrowserOpenTask", "BrowserTask", "ChatSessionStartEvent", "CodeReviewResult", "CodeReviewTask", "CodeWritingResult", "CodeWritingTask", "InstagramTask", "MtTaskResult", "MyMessage", "PlatformAccountData", "PlatformAccountTask", "TeamRunnerTask", "TerminationMessage"]

class AgentRunInputOther(BaseModel):
    """
    AgentRunInputOther
    """

    # data type: CodeWritingTask
    anyof_schema_1_validator: Optional[CodeWritingTask] = None
    # data type: CodeWritingResult
    anyof_schema_2_validator: Optional[CodeWritingResult] = None
    # data type: MyMessage
    anyof_schema_3_validator: Optional[MyMessage] = None
    # data type: PlatformAccountTask
    anyof_schema_4_validator: Optional[PlatformAccountTask] = None
    # data type: BrowserData
    anyof_schema_5_validator: Optional[BrowserData] = None
    # data type: PlatformAccountData
    anyof_schema_6_validator: Optional[PlatformAccountData] = None
    # data type: InstagramTask
    anyof_schema_7_validator: Optional[InstagramTask] = None
    # data type: ChatSessionStartEvent
    anyof_schema_8_validator: Optional[ChatSessionStartEvent] = None
    # data type: TeamRunnerTask
    anyof_schema_9_validator: Optional[TeamRunnerTask] = None
    # data type: TerminationMessage
    anyof_schema_10_validator: Optional[TerminationMessage] = None
    # data type: CodeReviewTask
    anyof_schema_11_validator: Optional[CodeReviewTask] = None
    # data type: CodeReviewResult
    anyof_schema_12_validator: Optional[CodeReviewResult] = None
    # data type: BrowserTask
    anyof_schema_13_validator: Optional[BrowserTask] = None
    # data type: BrowserOpenTask
    anyof_schema_14_validator: Optional[BrowserOpenTask] = None
    # data type: MtTaskResult
    anyof_schema_15_validator: Optional[MtTaskResult] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[BrowserData, BrowserOpenTask, BrowserTask, ChatSessionStartEvent, CodeReviewResult, CodeReviewTask, CodeWritingResult, CodeWritingTask, InstagramTask, MtTaskResult, MyMessage, PlatformAccountData, PlatformAccountTask, TeamRunnerTask, TerminationMessage]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = { "BrowserData", "BrowserOpenTask", "BrowserTask", "ChatSessionStartEvent", "CodeReviewResult", "CodeReviewTask", "CodeWritingResult", "CodeWritingTask", "InstagramTask", "MtTaskResult", "MyMessage", "PlatformAccountData", "PlatformAccountTask", "TeamRunnerTask", "TerminationMessage" }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = AgentRunInputOther.model_construct()
        error_messages = []
        # validate data type: CodeWritingTask
        if not isinstance(v, CodeWritingTask):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CodeWritingTask`")
        else:
            return v

        # validate data type: CodeWritingResult
        if not isinstance(v, CodeWritingResult):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CodeWritingResult`")
        else:
            return v

        # validate data type: MyMessage
        if not isinstance(v, MyMessage):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MyMessage`")
        else:
            return v

        # validate data type: PlatformAccountTask
        if not isinstance(v, PlatformAccountTask):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PlatformAccountTask`")
        else:
            return v

        # validate data type: BrowserData
        if not isinstance(v, BrowserData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BrowserData`")
        else:
            return v

        # validate data type: PlatformAccountData
        if not isinstance(v, PlatformAccountData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PlatformAccountData`")
        else:
            return v

        # validate data type: InstagramTask
        if not isinstance(v, InstagramTask):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InstagramTask`")
        else:
            return v

        # validate data type: ChatSessionStartEvent
        if not isinstance(v, ChatSessionStartEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ChatSessionStartEvent`")
        else:
            return v

        # validate data type: TeamRunnerTask
        if not isinstance(v, TeamRunnerTask):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TeamRunnerTask`")
        else:
            return v

        # validate data type: TerminationMessage
        if not isinstance(v, TerminationMessage):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TerminationMessage`")
        else:
            return v

        # validate data type: CodeReviewTask
        if not isinstance(v, CodeReviewTask):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CodeReviewTask`")
        else:
            return v

        # validate data type: CodeReviewResult
        if not isinstance(v, CodeReviewResult):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CodeReviewResult`")
        else:
            return v

        # validate data type: BrowserTask
        if not isinstance(v, BrowserTask):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BrowserTask`")
        else:
            return v

        # validate data type: BrowserOpenTask
        if not isinstance(v, BrowserOpenTask):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BrowserOpenTask`")
        else:
            return v

        # validate data type: MtTaskResult
        if not isinstance(v, MtTaskResult):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MtTaskResult`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in AgentRunInputOther with anyOf schemas: BrowserData, BrowserOpenTask, BrowserTask, ChatSessionStartEvent, CodeReviewResult, CodeReviewTask, CodeWritingResult, CodeWritingTask, InstagramTask, MtTaskResult, MyMessage, PlatformAccountData, PlatformAccountTask, TeamRunnerTask, TerminationMessage. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[CodeWritingTask] = None
        try:
            instance.actual_instance = CodeWritingTask.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[CodeWritingResult] = None
        try:
            instance.actual_instance = CodeWritingResult.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[MyMessage] = None
        try:
            instance.actual_instance = MyMessage.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[PlatformAccountTask] = None
        try:
            instance.actual_instance = PlatformAccountTask.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[BrowserData] = None
        try:
            instance.actual_instance = BrowserData.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[PlatformAccountData] = None
        try:
            instance.actual_instance = PlatformAccountData.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_7_validator: Optional[InstagramTask] = None
        try:
            instance.actual_instance = InstagramTask.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_8_validator: Optional[ChatSessionStartEvent] = None
        try:
            instance.actual_instance = ChatSessionStartEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_9_validator: Optional[TeamRunnerTask] = None
        try:
            instance.actual_instance = TeamRunnerTask.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_10_validator: Optional[TerminationMessage] = None
        try:
            instance.actual_instance = TerminationMessage.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_11_validator: Optional[CodeReviewTask] = None
        try:
            instance.actual_instance = CodeReviewTask.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_12_validator: Optional[CodeReviewResult] = None
        try:
            instance.actual_instance = CodeReviewResult.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_13_validator: Optional[BrowserTask] = None
        try:
            instance.actual_instance = BrowserTask.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_14_validator: Optional[BrowserOpenTask] = None
        try:
            instance.actual_instance = BrowserOpenTask.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_15_validator: Optional[MtTaskResult] = None
        try:
            instance.actual_instance = MtTaskResult.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into AgentRunInputOther with anyOf schemas: BrowserData, BrowserOpenTask, BrowserTask, ChatSessionStartEvent, CodeReviewResult, CodeReviewTask, CodeWritingResult, CodeWritingTask, InstagramTask, MtTaskResult, MyMessage, PlatformAccountData, PlatformAccountTask, TeamRunnerTask, TerminationMessage. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], BrowserData, BrowserOpenTask, BrowserTask, ChatSessionStartEvent, CodeReviewResult, CodeReviewTask, CodeWritingResult, CodeWritingTask, InstagramTask, MtTaskResult, MyMessage, PlatformAccountData, PlatformAccountTask, TeamRunnerTask, TerminationMessage]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


