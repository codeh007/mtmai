# coding: utf-8

"""
    Mtmai API

    The Mtmai API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from mtmai.clients.rest.models.function_call_dict import FunctionCallDict
from mtmai.clients.rest.models.function_response import FunctionResponse
from typing import Optional, Set
from typing_extensions import Self

class Part(BaseModel):
    """
    Part
    """ # noqa: E501
    text: Optional[StrictStr] = Field(default=None, description="Optional. Text part (can be code)..")
    video_metadata: Optional[Dict[str, Any]] = Field(default=None, description="Metadata for a given video..")
    thought: Optional[StrictBool] = Field(default=None, description="Indicates if the part is thought from the model..")
    code_execution_result: Optional[Dict[str, Any]] = None
    executable_code: Optional[StrictStr] = Field(default=None, description="Optional. Executable code..", alias="executableCode")
    file_data: Optional[Dict[str, Any]] = Field(default=None, description="Optional. File data..", alias="fileData")
    function_call: Optional[FunctionCallDict] = Field(default=None, alias="functionCall")
    function_response: Optional[FunctionResponse] = Field(default=None, alias="functionResponse")
    inline_data: Optional[Dict[str, Any]] = Field(default=None, description="Optional. Inlined bytes data..", alias="inlineData")
    __properties: ClassVar[List[str]] = ["text", "video_metadata", "thought", "code_execution_result", "executableCode", "fileData", "functionCall", "functionResponse", "inlineData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Part from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of function_call
        if self.function_call:
            _dict['functionCall'] = self.function_call.to_dict()
        # override the default output from pydantic by calling `to_dict()` of function_response
        if self.function_response:
            _dict['functionResponse'] = self.function_response.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Part from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Part) in the input: " + _key)

        _obj = cls.model_validate({
            "text": obj.get("text"),
            "video_metadata": obj.get("video_metadata"),
            "thought": obj.get("thought"),
            "code_execution_result": obj.get("code_execution_result"),
            "executableCode": obj.get("executableCode"),
            "fileData": obj.get("fileData"),
            "functionCall": FunctionCallDict.from_dict(obj["functionCall"]) if obj.get("functionCall") is not None else None,
            "functionResponse": FunctionResponse.from_dict(obj["functionResponse"]) if obj.get("functionResponse") is not None else None,
            "inlineData": obj.get("inlineData")
        })
        return _obj


