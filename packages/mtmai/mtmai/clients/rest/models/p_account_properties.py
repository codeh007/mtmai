# coding: utf-8

"""
    Hatchet API

    The Hatchet API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PAccountProperties(BaseModel):
    """
    PAccountProperties
    """ # noqa: E501
    username: StrictStr = Field(description="Username for the platform account")
    password: StrictStr = Field(description="Password for the platform account")
    email: StrictStr = Field(description="Email for the platform account")
    enabled: StrictBool = Field(description="Whether the account is enabled")
    platform_id: StrictStr = Field(description="Platform ID", alias="platformId")
    name: Optional[StrictStr] = Field(default=None, description="Display name for the account")
    description: Optional[StrictStr] = Field(default=None, description="Description of the account")
    type: Optional[StrictStr] = Field(default=None, description="Type or category of the account")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token if applicable")
    otp_seed: Optional[StrictStr] = Field(default=None, description="OTP seed for two-factor authentication", alias="otpSeed")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Tags for categorizing the account")
    comment: Optional[StrictStr] = Field(default=None, description="Additional notes or comments about the account")
    state: Optional[Dict[str, Any]] = Field(default=None, description="Additional state data for the account")
    __properties: ClassVar[List[str]] = ["username", "password", "email", "enabled", "platformId", "name", "description", "type", "token", "otpSeed", "tags", "comment", "state"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PAccountProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PAccountProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in PAccountProperties) in the input: " + _key)

        _obj = cls.model_validate({
            "username": obj.get("username"),
            "password": obj.get("password"),
            "email": obj.get("email"),
            "enabled": obj.get("enabled"),
            "platformId": obj.get("platformId"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "type": obj.get("type"),
            "token": obj.get("token"),
            "otpSeed": obj.get("otpSeed"),
            "tags": obj.get("tags"),
            "comment": obj.get("comment"),
            "state": obj.get("state")
        })
        return _obj


