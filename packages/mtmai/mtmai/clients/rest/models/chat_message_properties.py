# coding: utf-8

"""
    Mtmai API

    The Mtmai API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from mtmai.clients.rest.models.chat_message_properties_config import ChatMessagePropertiesConfig
from mtmai.clients.rest.models.model_usage import ModelUsage
from typing import Optional, Set
from typing_extensions import Self

class ChatMessageProperties(BaseModel):
    """
    ChatMessageProperties
    """ # noqa: E501
    type: StrictStr
    content: Dict[str, Any]
    content_type: StrictStr
    source: StrictStr
    topic: StrictStr
    thought: StrictStr
    thread_id: StrictStr
    msg_meta: Optional[Dict[str, Any]] = None
    config: Optional[ChatMessagePropertiesConfig] = None
    model_usage: Optional[ModelUsage] = None
    __properties: ClassVar[List[str]] = ["type", "content", "content_type", "source", "topic", "thought", "thread_id", "msg_meta", "config", "model_usage"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['user', 'system', 'assistant']):
            raise ValueError("must be one of enum values ('user', 'system', 'assistant')")
        return value

    @field_validator('content_type')
    def content_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['text', 'function_call']):
            raise ValueError("must be one of enum values ('text', 'function_call')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatMessageProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model_usage
        if self.model_usage:
            _dict['model_usage'] = self.model_usage.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatMessageProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ChatMessageProperties) in the input: " + _key)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "content": obj.get("content"),
            "content_type": obj.get("content_type"),
            "source": obj.get("source"),
            "topic": obj.get("topic"),
            "thought": obj.get("thought"),
            "thread_id": obj.get("thread_id"),
            "msg_meta": obj.get("msg_meta"),
            "config": ChatMessagePropertiesConfig.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "model_usage": ModelUsage.from_dict(obj["model_usage"]) if obj.get("model_usage") is not None else None
        })
        return _obj


