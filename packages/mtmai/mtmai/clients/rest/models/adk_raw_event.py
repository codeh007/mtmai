# coding: utf-8

"""
    Mtmai API

    The Mtmai API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from mtmai.clients.rest.models.content import Content
from mtmai.clients.rest.models.part import Part
from typing import Optional, Set
from typing_extensions import Self

class AdkRawEvent(BaseModel):
    """
    AdkRawEvent
    """ # noqa: E501
    invocation_id: StrictStr
    author: StrictStr
    actions: Dict[str, Any]
    long_running_tool_ids: List[StrictStr]
    branch: StrictStr
    partial: Optional[StrictBool] = None
    role: StrictStr
    parts: List[Part]
    grounding_metadata: Dict[str, Any]
    turn_complete: StrictBool
    error_code: StrictStr
    error_message: StrictStr
    interrupted: StrictBool
    custom_metadata: Dict[str, Any]
    content: Optional[Content] = None
    __properties: ClassVar[List[str]] = ["role", "parts", "grounding_metadata", "partial", "turn_complete", "error_code", "error_message", "interrupted", "custom_metadata", "content"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdkRawEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parts (list)
        _items = []
        if self.parts:
            for _item_parts in self.parts:
                if _item_parts:
                    _items.append(_item_parts.to_dict())
            _dict['parts'] = _items
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdkRawEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in AdkRawEvent) in the input: " + _key)

        _obj = cls.model_validate({
            "role": obj.get("role"),
            "parts": [Part.from_dict(_item) for _item in obj["parts"]] if obj.get("parts") is not None else None,
            "grounding_metadata": obj.get("grounding_metadata"),
            "partial": obj.get("partial"),
            "turn_complete": obj.get("turn_complete"),
            "error_code": obj.get("error_code"),
            "error_message": obj.get("error_message"),
            "interrupted": obj.get("interrupted"),
            "custom_metadata": obj.get("custom_metadata"),
            "content": Content.from_dict(obj["content"]) if obj.get("content") is not None else None
        })
        return _obj


